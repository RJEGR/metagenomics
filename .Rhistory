Class <- names_v9$Class
snc_names <- Class[is.na(Class$AphiaID), "ori_name"]
snc_names
dim(Class)
Class
inner_join(x, Class, by = 'ori_name') %>%
tbl_df() %>%
select(wr[2])
inner_join(x, Class, by = 'ori_name') %>%
tbl_df() %>%
select(wr[2]) -> out
out
inner_join(x, Class, by = 'ori_name') %>%
tbl_df()
dim(x)
inner_join(x, Class, by = 'ori_name') %>%
tbl_df() %>%
select(id, wr[2]) -> out
table(out$Class_wm)
names(table(out$Class_wm))
names(table(out$Class_wm)) %in% names(table(v9_out$ori_name)
)
qr[2]
mergew <- function(tax_tb, worms_tb, by = '') {
id <- rownames(tax_tb)
x <- data.frame(id = id, ori_name=tax_tb[, by])
inner_join(x, worms_tb, by = 'ori_name') %>%
tbl_df() %>%
select(id, by) -> out
return(out)
}
rownames(tax_v9)
rownames(tax_v9) <- v9_id
rownames(tax_coi) <- coi_id
head(tax_v9)
Phylum <- mergew(tax_v9, v9_out by = 'Phylum')
Phylum <- mergew(tax_v9, v9_out, by = 'Phylum')
mergew <- function(tax_tb, worms_tb, by = '') {
id <- rownames(tax_tb)
x <- data.frame(id = id, ori_name=tax_tb[, by])
wr <- paste0(by, "_wm")
inner_join(x, worms_tb, by = 'ori_name') %>%
tbl_df() %>%
select(id, wr) -> out
return(out)
}
Phylum <- mergew(tax_v9, v9_out, by = 'Phylum')
Phylum
mergew <- function(tax_tb, worms_tb, by = '') {
id <- rownames(tax_tb)
x <- data.frame(id = id, ori_name=tax_tb[, by])
wr <- paste0(by, "_wm")
inner_join(x, worms_tb, by = 'ori_name') %>%
tbl_df() %>%
select(id, ori_name, wr) -> out
return(out)
}
Phylum <- mergew(tax_v9, v9_out, by = 'Phylum')
qr
Class <- mergew(tax_v9, v9_out, by = 'Class')
Order <- mergew(tax_v9, v9_out, by = 'Order')
Order
Class
?inner_join
mergew <- function(tax_tb, worms_tb, by = '') {
id <- rownames(tax_tb)
x <- data.frame(id = id, ori_name=tax_tb[, by])
wr <- paste0(by, "_wm")
inner_join(x, worms_tb, by = 'ori_name', keep = TRUE) %>%
tbl_df() %>%
select(id, ori_name, wr) -> out
return(out)
}
Phylum <- mergew(tax_v9, v9_out, by = 'Phylum')
Phylum
Class <- mergew(tax_v9, v9_out, by = 'Class')
Class
Order <- mergew(tax_v9, v9_out, by = 'Order')
Order
mergew <- function(tax_tb, worms_tb, by = '') {
id <- rownames(tax_tb)
x <- data.frame(id = id, ori_name=tax_tb[, by])
wr <- paste0(by, "_wm")
inner_join(x, worms_tb, by = 'ori_name', copy = TRUE) %>%
tbl_df() %>%
select(id, ori_name, wr) -> out
return(out)
}
Phylum <- mergew(tax_v9, v9_out, by = 'Phylum')
Class <- mergew(tax_v9, v9_out, by = 'Class')
Order <- mergew(tax_v9, v9_out, by = 'Order')
Order
mergew <- function(tax_tb, worms_tb, by = '') {
id <- rownames(tax_tb)
x <- data.frame(id = id, ori_name=tax_tb[, by])
wr <- paste0(by, "_wm")
full_join(x, worms_tb, by = 'ori_name') %>%
tbl_df() %>%
select(id, ori_name, wr) -> out
return(out)
}
Phylum <- mergew(tax_v9, v9_out, by = 'Phylum')
Class <- mergew(tax_v9, v9_out, by = 'Class')
Order <- mergew(tax_v9, v9_out, by = 'Order')
Order
Phylum
mergew <- function(tax_tb, worms_tb, by = '') {
id <- rownames(tax_tb)
x <- data.frame(id = id, ori_name=tax_tb[, by])
wr <- paste0(by, "_wm")
right_join(x, worms_tb, by = 'ori_name') %>%
tbl_df() %>%
select(id, ori_name, wr) -> out
return(out)
}
Phylum <- mergew(tax_v9, v9_out, by = 'Phylum')
Phylum
mergew <- function(tax_tb, worms_tb, by = '') {
id <- rownames(tax_tb)
x <- data.frame(id = id, ori_name=tax_tb[, by])
wr <- paste0(by, "_wm")
left_join(x, worms_tb, by = 'ori_name') %>%
tbl_df() %>%
select(id, ori_name, wr) -> out
return(out)
}
Phylum <- mergew(tax_v9, v9_out, by = 'Phylum')
Phylum
Class <- mergew(tax_v9, v9_out, by = 'Class')
Order <- mergew(tax_v9, v9_out, by = 'Order')
Order
mergew <- function(tax_tb, worms_tb, by = '') {
id <- rownames(tax_tb)
x <- data.frame(id = id, ori_name=tax_tb[, by])
wr <- paste0(by, "_wm")
left_join(x, worms_tb, by = 'ori_name') %>%
tbl_df() %>%
select(wr) -> out # id, ori_name,
return(out)
}
Phylum <- mergew(tax_v9, v9_out, by = 'Phylum')
Class <- mergew(tax_v9, v9_out, by = 'Class')
Order <- mergew(tax_v9, v9_out, by = 'Order')
Order <- mergew(tax_v9, v9_out, by = 'Order')
Order <- mergew(tax_v9, v9_out, by = 'Order')
head(v9_out)
table(Kingdom_wm)
table(v9_out$Kingdom_wm)
mergew <- function(tax_tb, worms_tb, by = '') {
id <- rownames(tax_tb)
x <- data.frame(id = id, ori_name=tax_tb[, by])
wr <- paste0(by, "_wm")
left_join(x, worms_tb, by = 'ori_name') %>%
tbl_df() %>%
select(wr) -> out # id, ori_name,
return(out)
}
Phylum <- mergew(tax_v9, v9_out, by = 'Phylum')
Class <- mergew(tax_v9, v9_out, by = 'Class')
qr
Phylum <- mergew(tax_v9, v9_out, by = 'Phylum')
Class <- mergew(tax_v9, v9_out, by = 'Class')
Order <- mergew(tax_v9, v9_out, by = 'Order')
Family <- mergew(tax_v9, v9_out, by = 'Family')
Genus <- mergew(tax_v9, v9_out, by = 'Genus')
Species <- mergew(tax_v9, v9_out, by = 'Species')
names(table(v9_out$Kingdom_wm))
cbind(Phylum, Class, Order, Family, Genus, Species)
wtax_out <- cbind(Phylum, Class, Order, Family, Genus, Species)
head(wtax_out)
dim(wtax_out)
head(tax_v9)
wtax_out <- data.frame(id=rownames(tax_v9), cbind(Phylum, Class, Order, Family, Genus, Species))
head(wtax_out)
write.table(as(wtax_out, "matrix"),
quote = TRUE, sep = " ",
row.names = TRUE,
col.names = TRUE,
file = paste0(path_v9, 'taxonomy_18S_80_filtered_WORMS.csv'))
mergew_ <- function(tax_tb, worms_tb, by = '') {
id <- rownames(tax_tb)
x <- data.frame(id = id, ori_name=tax_tb[, by])
wr <- paste0(by, "_wm")
left_join(x, worms_tb, by = 'ori_name') %>%
tbl_df() %>%
select(isMarine) -> out # id, ori_name, isMarine, isFreshwater, isTerrestrial
return(out)
}
Phylum <- mergew_(tax_coi, coi_out, by = 'Phylum')
Class <- mergew_(tax_coi, coi_out, by = 'Class')
Order <- mergew_(tax_coi, coi_out, by = 'Order')
Family <- mergew_(tax_coi, coi_out, by = 'Family')
Phylum <- mergew_(tax_v9, v9_out, by = 'Phylum')
Class <- mergew_(tax_v9, v9_out, by = 'Class')
Order <- mergew_(tax_v9, v9_out, by = 'Order')
Family <- mergew_(tax_v9, v9_out, by = 'Family')
Genus <- mergew_(tax_v9, v9_out, by = 'Genus')
Species <- mergew_(tax_v9, v9_out, by = 'Species')
marine_out <- data.frame(id=rownames(tax_v9), cbind(Phylum, Class, Order, Family, Genus, Species))
dim(marine_out)
head(marine_out)
wr <- paste0(qr, "_wm")
names(marine_out)[-1] <- wr
nas <- function(x) {sum(is.na(x))}
apply(marine_out, 2, nas)
apply(wtax_out, 2, nas)
apply(tax_v9, 2, nas)
tbl <- cbind(as(wtax_out, "matrix"), as(marine_out, "matrix"))
write.table(tbl,
quote = TRUE, sep = " ",
row.names = TRUE,
col.names = TRUE,
file = paste0(path_v9, 'taxonomy_18S_80_filtered_WORMS.csv'))
paste0(path_v9, 'taxonomy_18S_80_filtered_WORMS.csv')
dim(tbl)
write.table(tbl,
quote = TRUE, sep = " ",
row.names = TRUE,
col.names = TRUE,
file = paste0(path_v9, 'taxonomy_18S_80_filtered_WORMS.csv'))
data.frame(apply(wtax_out, 2, nas))
data.frame(apply(tax_v9, 2, nas))
head(wtax_out)
write.table(as(wtax_out, "matrix"),
quote = TRUE, sep = " ",
row.names = TRUE,
col.names = TRUE,
file = paste0(path_v9, 'taxonomy_18S_80_filtered_WORMS.csv'))
write.table(as(wtax_out, "matrix"),
quote = TRUE, sep = " ",
row.names = TRUE,
col.names = TRUE,
file = paste0(path_v9, 'taxonomy_18S_80_filtered_WORMS.csv'))
path_v9
write.table(as(wtax_out, "matrix"),
quote = TRUE, sep = " ",
row.names = TRUE,
col.names = TRUE,
file = paste0(path_v9, 'taxonomy_18S_80_filtered_WORMS.csv'))
path_v9 <- '/Users/cigom/metagenomics/db/prep_model_ref/'
path <- '/Users/cigom/metagenomics/db/prep_model_ref/'
# Load files ----
wang <- 'peces_bold.tax'
tax.file <- list.files(path = path, full.names = TRUE, pattern = wang)
rm(list = ls())
options(stringsAsFactors = FALSE)
url <- 'https://raw.githubusercontent.com/RJEGR/metagenomics/master/readtx.R'
source(url)
"names2worms_" <- function(mynames, accepted = TRUE, ask = FALSE) {
# 'mynames' should be a vector with unique names (no NA's)
# output is a DF with the columns in 'fields_interest'
# Require
require(stringr)
require(worrms)
require(taxize)
mynames <- unique(mynames)
# Oficial taxonomy ranks
TL <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
# Taxonomy levels as DF
TL_df <- data.frame(rank=factor(TL, levels =TL, ordered = T) )
# Fields in WoRMS-Record that are of interest
fields_interest <- data.frame(fields=c("AphiaID", "scientificname", "status", "rank",
"valid_AphiaID", "valid_name", "valid_authority",
"isMarine", "isBrackish", "isFreshwater", "isTerrestrial", "modified"), stringsAsFactors = F)
# Columns for converted-DF
info_names <- c("ori_name", "AphiaID", "rank", "status", "modified",
paste0(TL, "_wm"), paste0(TL, "_wid"), "valid_AphiaID", "valid_name", "valid_authority",
"isMarine", "isFreshwater", "isTerrestrial")
#"isBrackish", queda fuera
# Object for converted names
n_info <- data.frame(matrix(ncol=25))
# Loop IDs to retrieve info
for(n in 1:length(mynames)){
## Worms
# Get ID (taxize)
# out_id <- get_wormsid(mynames[n], accepted = F, ask=T)
out_id <- get_wormsid(mynames[n], accepted = accepted, ask = ask)
# If only Species names appear (or lower levels), can use one, script will correct the name
# Evaluate ID existence
if(is.na(out_id) | is.null(out_id)){
# AphiaID doesnt exist
n_info[n,] <- c(mynames[n], rep(NA, 24))
} else {
# AphiaID exists, now check Record
# Get record using ID
out_rec <- wm_record(as.integer(out_id))
# Transform to DF
out_rec_df <- data.frame(do.call(rbind, out_rec), stringsAsFactors = F)
# Get info of interest
fields_df <- merge(x=fields_interest, y=out_rec_df, by.x="fields", by.y=0, all.x=T)
names(fields_df)[2] <- "to_validate"
# Evaluate Record
# If there's no valid-AphiaID or the Status is 'quarantined' or 'deleted'
if(is.na(fields_df[which(fields_df$fields %in% "valid_AphiaID"), "to_validate"]) | fields_df[which(fields_df$fields %in% "status"), "to_validate" ] %in% c("quarantined", "deleted")){
# AphiaID cant be helped
# Generate a line filled with NAs
n_info[n, ] <- c(mynames[n], rep(NA, 24))
} else {
# AphiaID is ok, a trusted record can be obtained using the valid-AphiaID
# retrieve good-record from good-ID
good_aphia <- as.integer(fields_df[which(fields_df$fields %in% "valid_AphiaID"), "to_validate"])
sec_rec <- wm_record(good_aphia)
# Transform to DF
sec_rec_df <- data.frame(do.call(rbind, sec_rec), stringsAsFactors = F)
# Get info of interest
good_sec_rec <- merge(x=fields_df, y=sec_rec_df, by.x="fields", by.y=0, all.x=T)
names(good_sec_rec)[3] <- "updated"
# Retrieve classification from good-ID
sec_class <- data.frame(wm_classification(good_aphia), stringsAsFactors = F)
# Evaluate duplicated ranks
if(nrow(sec_class) != length(unique(sec_class$rank))){
# Keep only first rank ocurrence
sec_class[duplicated(sec_class$rank), ] <- NA
}#/ if dup-ranks
# Combine with ranks of interest
sec_class <- merge(x=TL_df, y=sec_class, by="rank", all.x = T)
sec_class <- sec_class[order(sec_class$rank, decreasing = F), ]
# Fill DF with recovered info of interest
n_info[n, ] <- c(
mynames[n],
# info from Record (4 fields)
good_sec_rec[which(good_sec_rec$fields %in% "AphiaID"), "updated"],
good_sec_rec[which(good_sec_rec$fields %in% "rank"), "updated"],
good_sec_rec[which(good_sec_rec$fields %in% "status"), "updated"],
# Keep only date of modification (remove time)
sub("T.*", "", good_sec_rec[which(good_sec_rec$fields %in% "modified"), "updated"]),
# info from Taxonomy (7 names and 7 AphiaIDs)
sec_class[which(sec_class$rank %in% c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")), "scientificname"],
sec_class[which(sec_class$rank %in% c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")), "AphiaID"],
# more info from Record (6 fields)
good_sec_rec[which(good_sec_rec$fields %in% "valid_AphiaID"), "updated"],
good_sec_rec[which(good_sec_rec$fields %in% "valid_name"), "updated"],
good_sec_rec[which(good_sec_rec$fields %in% "valid_authority"), "updated"],
good_sec_rec[which(good_sec_rec$fields %in% "isMarine"), "updated"],
good_sec_rec[which(good_sec_rec$fields %in% "isFreshwater"), "updated"],
good_sec_rec[which(good_sec_rec$fields %in% "isTerrestrial"), "updated"])
}#/ ifelse  eval-record
}#/ ifelse eval-ID
}#/ for-Names
# Add names
names(n_info) <- info_names
# Return WORMS information about mynames
assign("n_info", n_info, .GlobalEnv)
} #fin-names2worms_()
path <- '/Users/cigom/metagenomics/db/prep_model_ref/'
# Load files ----
wang <- 'peces_bold.tax'
tax.file <- list.files(path = path, full.names = TRUE, pattern = wang)
tax.file
dim(tax <- read_rdp(tax.file))
head(tax)
# Load files ----
wang <- 'peces_bold.csv'
tax.file <- list.files(path = path, full.names = TRUE, pattern = wang)
dim(tax <- read_rdp(tax.file))
dim(tax <- read.csv(tax.file))
dim(tax <- read.table(tax.file))
dim(tax <- read.csv(tax.file, sep = ' '))
head(tax)
dim(tax <- read.csv(tax.file, sep = ' ', header = FALSE))
head(tax)
table(tax$V7)
dim(tax <- read.csv(tax.file, sep = ' ', header = FALSE, row.names = 1))
table(tax$V7)
head(tax)
id <- rownames(tax)
table(tax$V2)
rank <- c("Class", "Order", "Family", "Genus", "Species")
dim(tax <- read.csv(tax.file, sep = ' ', header = FALSE, row.names = 1, col.names = rank))
names(tax) <- rank
head(tax)
# Hard part to run!
worms_names <- apply(tax, 2, names2worms_)
tax <- mutate_all(tax, funs(str_replace_all(., c("_"=" "))))
c("_"=" ")
tax <- mutate_all(tax, funs(str_replace_all(., c("_"=" "))))
head(tax)
dim(tax <- read.csv(tax.file, sep = ' ', header = FALSE, row.names = 1))
names(tax) <- rank
head(Tax)
head(tax)
dim(Tax)
dim(tax)
head(tax[,6])
head(tax[,6] <- NULL)
dim(tax)
tax <- mutate_all(tax, funs(str_replace_all(., c("_"=" "))))
head(Tax)
head(tax)
# Hard part to run!
worms_names <- apply(tax, 2, names2worms_)
rm(list = ls())
#install.packages("bold")
require('bold')
citation(package = 'bold')
dim(res <- bold_specimens(taxon='Cumacea')) # heavy data
head(res[,1:8])
dim(res <- bold_specimens(taxon='Cumacea'))
# large data
library("taxize")
dir <- '/Users/cigom/metagenomics/COI/BOLD_SYSTEM_MEX/'
tbl <- read_delim(paste0(dir, 'bold_data_mex.txt'), delim = '\t')
?read_delim
??read_delim
tbl <- readr::read_delim(paste0(dir, 'bold_data_mex.txt'), delim = '\t')
tbl
# filter only COI records
# c('COII', 'COXIII', 'COI-3P')
COI_5P <- filter(tbl, markercode == 'COI-5P')
COI_3P <- filter(tbl, markercode == 'COI-3P')
COXIII <- filter(tbl, markercode == 'COXIII')
COII <- filter(tbl, markercode == 'COII')
nrow(tbl_COI <- rbind(COI_5P, COI_3P, COXIII, COII)) # 29285
taxonomy <- c('bin_uri', 'phylum_name', 'class_name', 'order_name', 'family_name', 'genus_name', 'species_name')
location <- c('lat', 'lon', 'country', 'region')
seq_properties <- c('sequenceID', 'markercode', 'genbank_accession', 'nucleotides', 'directions', 'seq_primers')
tbl_select <- select(tbl_COI, taxonomy)
# bins
bins <- data.frame(table(tbl_select$bin_uri))
head(bins <- bins[order(bins$Freq, decreasing = TRUE),])
# bin_test <- filter(tbl_select, bin_uri == 'BOLD:ACO9738')
#
# table(bin_test$phylum_name)
phylum_name <- data.frame(table(tbl_select$phylum_name))
tbl_select <- select(tbl_COI, taxonomy)
library(tidyverse)
# filter only COI records
# c('COII', 'COXIII', 'COI-3P')
COI_5P <- filter(tbl, markercode == 'COI-5P')
COI_3P <- filter(tbl, markercode == 'COI-3P')
COXIII <- filter(tbl, markercode == 'COXIII')
COII <- filter(tbl, markercode == 'COII')
nrow(tbl_COI <- rbind(COI_5P, COI_3P, COXIII, COII)) # 29285
taxonomy <- c('bin_uri', 'phylum_name', 'class_name', 'order_name', 'family_name', 'genus_name', 'species_name')
location <- c('lat', 'lon', 'country', 'region')
seq_properties <- c('sequenceID', 'markercode', 'genbank_accession', 'nucleotides', 'directions', 'seq_primers')
tbl_select <- select(tbl_COI, taxonomy)
# bins
bins <- data.frame(table(tbl_select$bin_uri))
head(bins <- bins[order(bins$Freq, decreasing = TRUE),])
# bin_test <- filter(tbl_select, bin_uri == 'BOLD:ACO9738')
#
# table(bin_test$phylum_name)
phylum_name <- data.frame(table(tbl_select$phylum_name))
class_name <- data.frame(table(tbl_select$class_name))
order_name <- data.frame(table(tbl_select$order_name))
tbl_select <- select(tbl_COI, location, seq_properties) # taxonomy
coors <- read.csv("~/Downloads/metadata_xiximi06.csv", header=TRUE, stringsAsFactors = FALSE)
coors$Transect <- substr(coors$Station, 1,1)
cicese <- data.frame(lat = coors$Latitude, lon = coors$Longitude,
country = 'Mexico', region = 'GoM')
table(tbl_select$country)
# 29091
library(ggrepel)
library(ggplot2)
library(tidyverse)
mex <- ggplot2::map_data("world", region = "Mexico")
usa <- map_data("state") %>%
subset(region %in% c("florida", "texas", "louisiana", "mississippi", "alabama"))
world <- rbind(mex, usa)
gg <- ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group),
fill = NA, color = "#D2D2D2", size = 0.7) +  #
# coord_fixed(xlim = c(-100,-80), ylim = c(15,30)) + # GoM only
coord_fixed(xlim = c(-120,-80), ylim = c(15,31)) + # GoM only
theme_bw()
gg2 <- gg +
# geom_point(data = tbl_select, aes(lon, lat), alpha = 0.7, color = "#365B60") +
geom_point(data = tbl_select, aes(lon, lat, color = markercode), alpha = 0.7) +
scale_color_brewer(palette = "RdYlBu") +
#geom_text_repel(data = coors,
#               aes(Longitude, Latitude, label = Station),
#                segment.color = "grey50") +
theme(text = element_text(size=12)) +
theme_bw() +
ggtitle("")
gg2 + geom_point(data = cicese, aes(lon, lat), alpha = 0.7, shape = 2, color = '#365B60')
#
# Sequence ----
tbl_select$seq_len <- nchar(tbl_select$nucleotides)
ggplot(tbl_select, aes(x=seq_len)) +
geom_density() +
geom_vline(aes(xintercept=mean(seq_len)),
color="blue", linetype="dashed", size=0.5) +
theme_classic()
p <- ggplot(tbl_select, aes(x=seq_len, color = markercode)) +
geom_density() + scale_color_brewer(palette="Dark2") +
facet_wrap(~ markercode, scales = 'free') +
theme_classic()
p <- ggplot(tbl_select, aes(x=seq_len, color = markercode)) +
geom_density() + scale_color_brewer(palette="Dark2") +
facet_wrap(~ markercode, scales = 'free') +
theme_classic()
p
## search database ncbi for:
tbl_select <- select(tbl_COI, seq_properties)
# with genbank accession number
table(is.na(tbl_select$genbank_accession))
markercode <- data.frame(table(tbl_select$markercode))
head(markercode <- markercode[order(markercode$Freq, decreasing = TRUE),])
# Var1  Freq
# Var1  Freq
# 2 COI-5P 29091
# Var1  Freq
# 2 COI-5P 29091
# 1 COI-3P   190
# Var1  Freq
# 2 COI-5P 29091
# 1 COI-3P   190
# 3   COII     2
out <- lapply(nms, bold_seq)
nms <- x$Arthropoda$childtaxa_name
